# Expense Tracker

A personal finance tracking application to help users manage their income and expenses effectively, providing a real-time financial overview.

## 🌟 Features

- **User Authentication & Security**
  - Secure signup and login system using bcrypt for password hashing
  - Session management to ensure data privacy

- **Dashboard Overview**
  - Real-time display of Current Balance, Total Income, and Total Expenses
  - Instant financial health tracking

- **Transaction Management**
  - Add, edit, delete, and view income and expenses
  - Categorize transactions (Rent, Salary, Groceries, Dining)
  - Color-coded transactions (green for income, red for expenses)

- **Comprehensive Categorization**
  - Predefined categories to track spending habits

- **Robust Backend**
  - PostgreSQL database for reliable data storage
  - Database migrations for structured data versioning
  - Modular Express Router for clean API handling

## 🛠 Tech Stack

- **Backend:** Node.js, Express.js
- **Database:** PostgreSQL
- **Authentication:** bcrypt, express-session
- **API:** RESTful API
- **Migrations:** Knex.js

## 📂 Project Structure

```
/expense-tracker
│── /server
│   ├── /routes
│   │   ├── authRoutes.js
│   │   ├── transactionRoutes.js
│   │   ├── categoryRoutes.js
│   ├── /models
│   │   ├── User.js
│   │   ├── Transaction.js
│   │   ├── Category.js
│   ├── /controllers
│   │   ├── authController.js
│   │   ├── transactionController.js
│   │   ├── categoryController.js
│   ├── /middleware
│   │   ├── authMiddleware.js
│   ├── /config
│   │   ├── db.js
│   ├── migrations/
│   ├── package.json
│   ├── server.js
```

## 🚀 Getting Started

### Prerequisites
- Node.js
- PostgreSQL

### Installation

1. Clone the repository
   ```sh
   git clone https://github.com/yourusername/expense-tracker.git
   cd expense-tracker
   ```

2. Install dependencies
   ```sh
   npm install
   ```

3. Set up environment variables
   Create a `.env` file with:
   ```env
   DATABASE_URL=your_postgresql_connection_string
   SESSION_SECRET=your_secret_key
   ```

4. Run database migrations
   ```sh
   npx knex migrate:latest
   ```

5. Start the server
   ```sh
   npm start
   ```

6. Open `http://localhost:3000` in your browser

## 🔌 API Endpoints

### Authentication
| Method | Endpoint         | Description          |
|--------|-----------------|----------------------|
| POST   | /api/register   | Register a new user |
| POST   | /api/login      | Login user          |
| GET    | /api/logout     | Logout user         |

### Transactions
| Method | Endpoint              | Description                   |
|--------|----------------------|-------------------------------|
| GET    | /api/transactions     | Get all transactions          |
| POST   | /api/transactions     | Add a new transaction         |
| PUT    | /api/transactions/:id | Edit a transaction           |
| DELETE | /api/transactions/:id | Delete a transaction         |

### Categories
| Method | Endpoint         | Description            |
|--------|-----------------|------------------------|
| GET    | /api/categories | Get all categories    |

## 🔮 Future Improvements

- Implement data visualization for better insights
- Add budget goals and overspending alerts
- Develop mobile app support using React Native

## 🤝 Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## 📄 License

This project is licensed under the MIT License.

---

Give a ⭐ if you find this project useful!
